version: "3.9"
services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-abstractdb}
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 8
    ports:
      - "5432:5432"

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      DATABASE_URL: postgresql+psycopg2://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-abstractdb}
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN:-http://localhost:8080}
      EMBED_MODEL: ${EMBED_MODEL:-all-MiniLM-L6-v2}
      EMBED_DEVICE: ${EMBED_DEVICE:-cpu}
      VECTOR_DIM: ${VECTOR_DIM:-384}
      INDEX_OVERSAMPLE_FACTOR: ${INDEX_OVERSAMPLE_FACTOR:-5}
      INDEX_DIR: /data/indices
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - indexdata:/data/indices
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-http://localhost:8000}
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8080:80"
    environment:
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-http://localhost:8000}

volumes:
  indexdata:
  pgdata:
